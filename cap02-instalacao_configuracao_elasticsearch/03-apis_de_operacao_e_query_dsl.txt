### # API de Operações Básicas, Query DSL e Agregações


### # Criando um Indice  

PUT /meu_indice
{
  "settings": {
    "number_of_shards": 1,
    "number_of_replicas": 1,
    "refresh_interval": "1s"
  },
  "mappings": {
    "properties": {
      "nome": {
        "type": "keyword",
        "fields": {
          "searcheable": {
            "type": "text"
          }
        }
      },
      "nascimento": {
        "type": "date",
        "format": "dd/MM/yy"
      },
      "profissao": {
        "type": "keyword",
        "fields": {
          "searcheable": {
            "type": "text"
          }
        }
      },
      "idade": {
        "type": "integer"
      }
    }
  }
}


### # Criando um documento

PUT /meu_indice/_doc/1
{
  "nome": "Rodrigo Tornis",
  "nascimento": "07/01/80",
  "profissao": "Especialista Elastic Stack",
  "idade": 40
}


### # Alterando um documento

PUT /meu_indice/_doc/1
{
  "nome": "Fulano de Beltrano",
  "nascimento": "25/10/90",
  "profissao": "Especialista Big Data",
  "idade": 40
}


### #Usando a API de Update 

POST /meu_indice/_update/1
{
  "doc": {
    "idade": 25
  }
}


### # Alterando baseado em consulta - update_by_script

POST /meu_indice/_update/1
{
  "script": {
    "source": "ctx._source.idade += params.count",
    "lang": "painless",
    "params": {
      "count": 20
    }
  }
}


### # Update by query com consulta DSL

POST /meu_indice/_update_by_query
{
  "script": {
    "source": "ctx._source.idade += params.count",
    "lang": "painless",
    "params": {
      "count": 20
    }
  },
  "query": {
    "match_all": {}
  }
}


### # Buscando/Consultando documentos

GET /meu_indice/_search?q=nome:Fulano de Beltrano

GET /meu_indice/_search
{
  "query": {
    "query_string": {
      "default_field": "nome:",
      "query": "fulano"
    }
  }
}


GET /meu_indice/_search
{
  "query": {
    "match_all": {}
  }
}


GET /meu_indice/_doc/1

### # Fazendo multiplas consultas com multi get

GET /_mget
{
  "docs": [
    {
      "_index": "meu_indice",
      "_id": "1"
    },
    {
      "_index": "meu_indice",
      "_id": "2"
    }
  ]
}


### # Deletando um documento 

DELETE /meu_indice/_doc/1

### # Deletando por um critério - _delete_by_query

POST /meu_indice/_delete_by_query?conflicts=proceed
{
  "query": {
    "match_all": {}
  }
}


POST /meu_indice/_delete_by_query
{
  "query": {
    "range": {
      "idade": {
        "gte": 10
      }
    }
  }
}


### # Opearações de Bulk (index,update,delete e create) 

POST /_bulk
{ "index" : { "_index" : "meu_indice", "_id" : "2" } }

{ "nome" : "Fulano de Ciclano", "nascimento" : "25/10/90","profissao":"Especialista Elastic Stack","idade": 40}

{ "index" : { "_index" : "meu_indice", "_id" : "3" } }

{ "nome" : "Beltrano de Ciclano", "nascimento" : "03/11/90","profissao":"Especialista Elastic Stack","idade": 40}

{ "index" : { "_index" : "meu_indice", "_id" : "4" } }

{ "nome" : "Ciclano da Cunha", "nascimento" : "26/12/84","profissao":"Especialista Elastic Stack","idade": 40}

{ "index" : { "_index" : "meu_indice", "_id" : "5" } }

{ "nome" : "Fulano de Ciclano", "nascimento" : "17/09/20","profissao":"Especialista Elastic Stack","idade": 40}


### # Bulk usando o comando CURL no servidor MASTER

### cd /elasticstack/datasets

### wget https://raw.githubusercontent.com/tornis/esstackenterprise/master/datasets/accounts.json

### wget https://raw.githubusercontent.com/tornis/esstackenterprise/master/datasets/movie.json

### wget https://raw.githubusercontent.com/tornis/esstackenterprise/master/datasets/movie-data.json

### wget https://raw.githubusercontent.com/tornis/esstackenterprise/master/datasets/crimessp.json

### wget https://raw.githubusercontent.com/tornis/esstackenterprise/master/datasets/crimessp-data.json

POST /banco/_doc/_bulk?pretty&refresh
-binary @accounts.json


PUT /movie?pretty
-binary @movie.json


PUT /crimessp?pretty
-binary @crimessp.json


PUT /crimessp/_doc/_bulk?pretty&refresh
-binary @crimessp-data.json


PUT /movie/_doc/_bulk?pretty&refresh
-binary @movie-data.json


GET /_cat/indices?v

### # Outras operações com API bulk

POST /_bulk
{ "delete" : { "_index" : "meu_indice", "_id" : "2" } }

{ "create" : { "_index" : "meu_indice", "_id" : "3" } }

{ "salario" : "1000.00" }

{ "update" : {"_id" : "4", "_index" : "meu_indice"} }

{ "doc" : {"idade" : "50"} }


### ########  Query DSL - Exemplos 

### # Busca com definição de boosting - Compound(Compostas)

GET /movie/_search
{
  "query": {
    "boosting": {
      "positive": {
        "match": {
          "description": "cat"
        }
      },
      "negative": {
        "match": {
          "description": "monkey"
        }
      },
      "negative_boost": 0.1
    }
  },
  "_source": [
    "listed_in",
    "description"
  ],
  "size": 50
}


### # Buscando usando query_string - FullText

GET /banco/_search
{
  "query": {
    "query_string": {
      "query": "(Orick) OR (Nogal)",
      "default_field": "city"
    }
  }
}


### # Busca usando simple_query_string - FullText

GET /banco/_search
{
  "query": {
    "simple_query_string": {
      "query": "Court",
      "fields": [
        "address",
        "firstname"
      ],
      "default_operator": "and"
    }
  }
}


### # Busca usando Match 

GET /movie/_search
{
  "size": 20,
  "query": {
    "match": {
      "description": {
        "query": "cat monkey",
        "operator": "or"
      }
    }
  }
}


### # Retornando apenas documentos onde campo account_number for igual a 20

GET /banco/_search
{
  "query": {
    "match": {
      "account_number": 20
    }
  }
}


### # Retornando apenas documentos onde termo address contiver "mill"

GET /banco/_search
{
  "query": {
    "match": {
      "address": "mill"
    }
  }
}


### # Retornando documentos onde termo address contiver "nova ou ford"

GET /banco/_search
{
  "query": {
    "match": {
      "address": "nova ford"
    }
  }
}


### # Retornado documentos que contenha na frase "thomas street"

GET /banco/_search
{
  "query": {
    "match_phrase": {
      "address": " thomas"
    }
  }
}


### # Retorna todos os documentos em que os dois termos pesquisados sejam verdadeiros

GET /banco/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "address": "street"
          }
        },
        {
          "match": {
            "address": "ford"
          }
        }
      ]
    }
  }
}


### # Retorna todos os documentos em que um dos termos pesquisados seja verdadeiro

GET /banco/_search
{
  "query": {
    "bool": {
      "should": [
        {
          "match": {
            "address": "street"
          }
        },
        {
          "match": {
            "address": "ford"
          }
        }
      ]
    }
  }
}


### # Retorna todas os documentos que não contenha os termo "ford" e "street"

GET /banco/_search
{
  "query": {
    "bool": {
      "must_not": [
        {
          "match": {
            "address": "ford"
          }
        },
        {
          "match": {
            "address": "street"
          }
        }
      ]
    }
  }
}


### # Retorna todos os documentos de pessoas com 40 anos mas que não vive na cidade de Oretta

GET /banco/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "age": "40"
          }
        }
      ],
      "must_not": [
        {
          "match": {
            "city": "Oretta"
          }
        }
      ]
    }
  }
}


### # Buscando valores entre um range de idade 

GET /banco/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "range": {
          "age": {
            "gte": 20,
            "lte": 30
          }
        }
      }
    }
  }
}


### # Busca usando URIs

GET /banco/_search?q=*&sort=account_number:desc

### # Busca todos os documentos

GET /banco/_search
{
  "query": {
    "match_all": {}
  }
}

# Busca todos os documentos mas limitando o resultado com size

GET /banco/_search

{
  "query": {
    "match_all": {}
  },
  "size": 1
}

# Busca todos os documentos mas limitando o resultado from size

GET /banco/_search

{
  "query": {
    "match_all": {}
  },
  "from": 50, 
  "size": 10
}

# Busca todos os documentos em ordem decrescente sort

GET /banco/_search

{
  "query": { "match_all": {} },
  "sort": [
    { "account_number": "desc" }
  ]
}


### # Retornando apenas campos desejados _source

GET /banco/_search
{
  "query": {
    "match_all": {}
  },
  "_source": [
    "account_number",
    "balance"
  ]
}


### # QUERY DSL - Buscas com Geoespacialização

### # Busca por uma área definiada Geo Bounding Box

GET /crimessp/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "geo_bounding_box": {
          "latlong": {
            "top_left": "-23.54, -46.46",
            "bottom_right": "-23.58, -46.71"
          }
        }
      }
    }
  }
}


### # Busca more_like_this

GET /crimessp/_search
{
  "query": {
    "more_like_this": {
      "fields": [
        "titulo",
        "descricao"
      ],
      "like": "brinquedo arma",
      "min_term_freq": 1,
      "max_query_terms": 12
    }
  }
}


### ### AGREGAÇÕES - EXEMPLOS

### # AGREGAÇÕES BUCKETS + METRIC - Agrupe por faixa etária, sexo e calcule a media do saldo 

GET /banco/_search
{
  "size": 0,
  "aggs": {
    "group_by_age": {
      "range": {
        "field": "age",
        "ranges": [
          {
            "from": 20,
            "to": 30
          },
          {
            "from": 30,
            "to": 40
          },
          {
            "from": 40,
            "to": 50
          }
        ]
      },
      "aggs": {
        "group_by_gender": {
          "terms": {
            "field": "gender.keyword"
          },
          "aggs": {
            "average_balance": {
              "avg": {
                "field": "balance"
              }
            }
          }
        }
      }
    }
  }
}


### # AGREGAÇÕES BUCKETS + METRIC- Calcule a média saldo agrupada pelo sexo 

GET /banco/_search
{
  "size": 0,
  "aggs": {
    "group_by_state": {
      "terms": {
        "field": "gender.keyword"
      },
      "aggs": {
        "average_balance": {
          "avg": {
            "field": "balance"
          }
        }
      }
    }
  }
}


### # AGREGAÇÕES BUCKETS - Agrupe documentos pelo sexo 

GET /banco/_search
{
  "size": 0,
  "aggs": {
    "group_by_gender": {
      "terms": {
        "field": "gender.keyword"
      }
    }
  }
}


### # AGREGAÇÕES BUCKETS + METRIC Calcule a média saldo agrupada pelo sexo 

GET /banco/_search
{
  "size": 0,
  "aggs": {
    "group_by_state": {
      "terms": {
        "field": "gender.keyword"
      },
      "aggs": {
        "average_balance": {
          "avg": {
            "field": "balance"
          }
        }
      }
    }
  }
}


### # AGREGAÇÕES METRIC - Máximo, Minimo,  de um conjunto de valores

GET /banco/_search
{
  "aggs": {
    "max_price": {
      "max": {
        "field": "balance"
      }
    }
  }
}


### # AGREGAÇÕES METRIC - Percentils - Geralmente para identificar anomalias 

GET /crimessp/_search
{
  "size": 0,
  "aggs": {
    "valor_outlier": {
      "percentiles": {
        "field": "valor_prejuizo",
        "percents": [
          95,
          99,
          99.9
        ]
      }
    }
  }
}	


### # AGREGAÇÕES METRIC - Desvio Absoluto Mediano - Utilizando para verificar variabilidade de um dado

GET /crimessp/_search
{
  "size": 0,
  "aggs": {
    "review_average": {
      "avg": {
        "field": "valor_prejuizo"
      }
    },
    "review_variability": {
      "median_absolute_deviation": {
        "field": "valor_prejuizo"
      }
    }
  }
}


### # PIPELINE AGGREGATION - Sum Bucket

GET /crimessp/_search
{
  "size": 0,
  "aggs": {
    "prejuizo_mes": {
      "date_histogram": {
        "field": "time",
        "calendar_interval": "month"
      },
      "aggs": {
        "valor": {
          "sum": {
            "field": "valor_prejuizo"
          }
        }
      }
    },
    "soma_total_meses": {
      "sum_bucket": {
        "buckets_path": "prejuizo_mes>valor"
      }
    }
  }
}


### ###### API _CAT ######

### # Verificando a saúde do cluster

GET /_cat/health?v

### # verificando alias existentes

GET /_cat/aliases?v
GET _cat/aliases/<alias>


### # checando estado do indice

GET /_cat/indices?v

### # verificando quais masters estão no cluster

GET /_cat/master?v

### # verificando quais nós estão no cluster

GET /_cat/nodes?v

### # verificando os atributos habilitados dos nodes

GET /_cat/nodeattrs?v

### # verificando quantos documentos tem no cluster

GET /_cat/count?v

### # verificando quantos documentos tem no cluster

GET /_cat/count?v

### # verificando alocação de shards

GET /_cat/allocation
GET _cat/allocation/<node_id>


### # verificando segmets dos shards

GET /_cat/segments/<index>
GET _cat/segments?v
